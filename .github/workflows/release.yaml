name: Build and Release Container

on:
  push:
    paths:
      - '.github/workflows/release.yaml'
      - 'src/**'
      - 'containers/**'
      - 'charts/**'
      - 'API Project/**'
      - 'Project Admin/**'
    branches:
      - '**'

env:
  HARBOR_REGISTRY: ${{ vars.HARBOR_REGISTRY }}
  HARBOR_PROJECT: ${{ vars.HARBOR_PROJECT }}
  HARBOR_REPO: ${{ vars.HARBOR_REPO }}
  HARBOR_USER: ${{ vars.HARBOR_USER }}
  HARBOR_TOKEN: ${{ secrets.HARBOR_TOKEN }}

jobs:
  release-api-container:
    runs-on: [self-hosted, linux, x64]

    env:
      TAG_PREFIX: 'DARE-Control-API-Container'
      TAG_FORMAT: 'DARE-Control-API-Container-${version}'
      HARBOR_API_REPO: ${{ vars.HARBOR_REPO }}-api

    steps:
      - name: clone repo
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: container-changes
        with:
          filters: |
            src:
              - '.github/workflows/release.yaml'
              - 'containers/api/**'
              - 'API Project/**'

      - name: build container
        if: steps.container-changes.outputs.src == 'true'
        run: |
          docker build -t image -f "containers/api/Dockerfile" .

      - name: registry login
        if: steps.container-changes.outputs.src == 'true'
        run: |
          echo "$HARBOR_TOKEN" | docker login $HARBOR_REGISTRY -u $HARBOR_USER --password-stdin

      - name: generate token
        if: steps.container-changes.outputs.src == 'true'
        id: generate-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: semantic release dry run
        if: steps.container-changes.outputs.src == 'true'
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic-dry
        with:
          dry_run: true

          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main'
            ]

          tag_format: ${{ env.TAG_FORMAT }}

          plugins: |-
            [
              ['@semantic-release/commit-analyzer', {
                "releaseRules": [
                  {"type": "major", "release": "major"},
                  {"type": "minor", "release": "minor"},
                  {"type": "patch", "release": "patch"},
                  {"type": "no-release", "release": false},
            
                  {"type": "chore", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  
                  {"type": "docs", "release": false},
                  {"type": "test", "release": false},
                  {"type": "ci", "release": false},
                  
                  {"type": "feat", "release": "minor"},
                  
                  {"type": "revert", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "build", "release": "patch"},
                ],
              }]
            ]
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: semantic release
        if: steps.container-changes.outputs.src == 'true' && steps.semantic-dry.outputs.new-release-published == 'true'
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic
        with:
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main'
            ]

          tag_format: ${{ env.TAG_FORMAT }}

          additional_packages: |
            ['@semantic-release/exec']

          plugins: |-
            [
              ['@semantic-release/commit-analyzer', {
                "releaseRules": [
                  {"type": "major", "release": "major"},
                  {"type": "minor", "release": "minor"},
                  {"type": "patch", "release": "patch"},
                  {"type": "no-release", "release": false},
            
                  {"type": "chore", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  
                  {"type": "docs", "release": false},
                  {"type": "test", "release": false},
                  {"type": "ci", "release": false},
                  
                  {"type": "feat", "release": "minor"},
                  
                  {"type": "revert", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "build", "release": "patch"},
                ],
              }], 
              ['@semantic-release/exec', { 
                "generateNotesCmd": "echo '${ process.env.RELEASE_NOTES }'" 
              }],
              '@semantic-release/release-notes-generator',
              ['@semantic-release/github', {
                "successComment": false,
                "failTitle": false
              }]
            ]
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          RELEASE_NOTES: |
            ```
            echo "<token>" | docker login ${{ env.HARBOR_REGISTRY }} -u <username> --password-stdin
            docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.HARBOR_API_REPO }}:${{ steps.semantic-dry.outputs.release-version }}
            ```

      - name: container push to registry
        id: container-push
        if: steps.container-changes.outputs.src == 'true' && steps.semantic.outputs.new-release-published == 'true'
        run: |
          docker tag image $HARBOR_REGISTRY/$HARBOR_PROJECT/$HARBOR_API_REPO:$TAG
          docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$HARBOR_API_REPO:$TAG
        env:
          TAG: ${{ steps.semantic.outputs.release-version }}
          
      - name: delete orphaned release on container push failure
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: (failure() && steps.container-push.outcome == 'failure') && steps.semantic.outputs.new-release-published == 'true'
        with:
          tag_name: ${ env.TAG_PREFIX }-${{ steps.semantic.outputs.release-version }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

  release-ui-container:
    runs-on: [self-hosted, linux, x64]

    env:
      TAG_PREFIX: 'DARE-Control-UI-Container'
      TAG_FORMAT: 'DARE-Control-UI-Container-${version}'
      HARBOR_UI_REPO: ${{ vars.HARBOR_REPO }}-ui

    steps:
      - name: clone repo
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: container-changes
        with:
          filters: |
            src:
              - '.github/workflows/release.yaml'
              - 'containers/ui/**'
              - 'Project Admin/**'

      - name: build container
        if: steps.container-changes.outputs.src == 'true'
        run: |
          docker build -t image -f "containers/ui/Dockerfile" .

      - name: registry login
        if: steps.container-changes.outputs.src == 'true'
        run: |
          echo "$HARBOR_TOKEN" | docker login $HARBOR_REGISTRY -u $HARBOR_USER --password-stdin

      - name: generate token
        if: steps.container-changes.outputs.src == 'true'
        id: generate-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: semantic release dry run
        if: steps.container-changes.outputs.src == 'true'
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic-dry
        with:
          dry_run: true

          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main'
            ]

          tag_format: ${{ env.TAG_FORMAT }}

          plugins: |-
            [
              ['@semantic-release/commit-analyzer', {
                "releaseRules": [
                  {"type": "major", "release": "major"},
                  {"type": "minor", "release": "minor"},
                  {"type": "patch", "release": "patch"},
                  {"type": "no-release", "release": false},
            
                  {"type": "chore", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  
                  {"type": "docs", "release": false},
                  {"type": "test", "release": false},
                  {"type": "ci", "release": false},
                  
                  {"type": "feat", "release": "minor"},
                  
                  {"type": "revert", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "build", "release": "patch"},
                ],
              }]
            ]
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: semantic release
        if: steps.container-changes.outputs.src == 'true' && steps.semantic-dry.outputs.new-release-published == 'true'
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: semantic
        with:
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main'
            ]

          tag_format: ${{ env.TAG_FORMAT }}

          additional_packages: |
            ['@semantic-release/exec']

          plugins: |-
            [
              ['@semantic-release/commit-analyzer', {
                "releaseRules": [
                  {"type": "major", "release": "major"},
                  {"type": "minor", "release": "minor"},
                  {"type": "patch", "release": "patch"},
                  {"type": "no-release", "release": false},
            
                  {"type": "chore", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  
                  {"type": "docs", "release": false},
                  {"type": "test", "release": false},
                  {"type": "ci", "release": false},
                  
                  {"type": "feat", "release": "minor"},
                  
                  {"type": "revert", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "build", "release": "patch"},
                ],
              }], 
              ['@semantic-release/exec', { 
                "generateNotesCmd": "echo '${ process.env.RELEASE_NOTES }'" 
              }],
              '@semantic-release/release-notes-generator',
              ['@semantic-release/github', {
                "successComment": false,
                "failTitle": false
              }]
            ]
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          RELEASE_NOTES: |
            ```
            echo "<token>" | docker login ${{ env.HARBOR_REGISTRY }} -u <username> --password-stdin
            docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.HARBOR_UI_REPO }}:${{ steps.semantic-dry.outputs.release-version }}
            ```

      - name: container push to registry
        id: container-push
        if: steps.container-changes.outputs.src == 'true' && steps.semantic.outputs.new-release-published == 'true'
        run: |
          docker tag image $HARBOR_REGISTRY/$HARBOR_PROJECT/$HARBOR_UI_REPO:$TAG
          docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$HARBOR_UI_REPO:$TAG
        env:
          TAG: ${{ steps.semantic.outputs.release-version }}

      - name: delete orphaned release on container push failure
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: (failure() && steps.container-push.outcome == 'failure') && steps.semantic.outputs.new-release-published == 'true'
        with:
          tag_name: ${ env.TAG_PREFIX }-${{ steps.semantic.outputs.release-version }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

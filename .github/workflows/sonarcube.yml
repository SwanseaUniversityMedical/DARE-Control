name: Scan

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DAREUI: dare-control-ui
  DAREAPI: dare-control-api
  TREUI: dare-control-treui
  TREAPI: dare-control-treapi
  EGRESSUI: dare-control-egressui
  EGRESSAPI: dare-control-egressapi
  COMMONBL: dare-control-bl
  

jobs:
  scan-code:
    name: Scan
    runs-on: [self-hosted, linux, x64]
    # runs-on: windows-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis.

      - name: scan ${{ env.DAREUI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/DARE-FrontEnd \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.DAREUI }} /name:${{ env.DAREUI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "DARE-FrontEnd.csproj" \
              && dotnet build "DARE-FrontEnd.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

      - name: scan ${{ env.DAREAPI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/DARE-API \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.DAREAPI }} /name:${{ env.DAREAPI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "DARE-API.csproj" \
              && dotnet build "DARE-API.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

      - name: scan ${{ env.TREUI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/TRE-UI \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.TREUI }} /name:${{ env.TREUI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "TRE-UI.csproj" \
              && dotnet build "TRE-UI.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash
      
      - name: scan ${{ env.TREAPI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/TRE-API \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.TREAPI }} /name:${{ env.TREAPI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "TRE-API.csproj" \
              && dotnet build "TRE-API.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

      - name: scan ${{ env.EGRESSUI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/Data-Egress-UI \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.EGRESSUI }} /name:${{ env.EGRESSUI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "Data-Egress-UI.csproj" \
              && dotnet build "Data-Egress-UI.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

      - name: scan ${{ env.EGRESSAPI }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/Data-Egress-API \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.EGRESSAPI }} /name:${{ env.EGRESSAPI }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "Data-Egress-API.csproj" \
              && dotnet build "Data-Egress-API.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

      - name: scan ${{ env.COMMONBL }} project
        run: |
          docker run --rm \
          -v $(pwd):/source \
          alleeex/dotnet-sonar:23.06.4-r2 \
          bash -c \
              "cd /source/src/BL \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin \
              /k:${{ env.COMMONBL }} /name:${{ env.COMMONBL }} \
              /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }} \
              && dotnet restore "BL.csproj" \
              && dotnet build "BL.csproj" -c Release \
              && dotnet /sonar-scanner/SonarScanner.MSBuild.dll end \
              /d:sonar.login=${{ secrets.SONAR_TOKEN }}"

      - name: Sleep for 30 seconds to give the SQ server a chance to catch up
        run: sleep 30s
        shell: bash

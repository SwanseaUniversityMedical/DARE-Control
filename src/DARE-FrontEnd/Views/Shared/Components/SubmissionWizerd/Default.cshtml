@using BL.Models.ViewModels
@using DARE_FrontEnd.Formatters
@model BL.Models.ViewModels.SubmissionWizard
@{
    ViewData["Title"] = "Submission Wizard";
}


@using (Html.BeginForm("SubmissionWizard", "Submission", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmMain" }))
{
    @Html.HiddenFor(x => x.ProjectId)
    {
        <div class="modal-body">
            <div class="form-group">
                @Html.LabelFor(x => x.ProjectName,new {@class="form-label fw-bold"})
                @Html.DisplayFor(x => x.ProjectName, new {@class="form-control"})
            </div>
            <div class="mb-4">
                @Html.LabelFor(x => x.TESName,new {@class="form-label fw-bold"})
                @Html.TextBoxFor(x => x.TESName, new {@class="form-control"})
            </div>
            <div class="col-md-6 mb-4">
                @*@Html.LabelFor(x => x.Tres,new {@class="form-label fw-bold"})
                @Html.ListBoxFor(x => x.Tres, Model.SelectTresOptions.Select(y => new SelectListItem(y, y)), new { @class = "form-select" })*@
                @for (var i = 0; i < Model.TreRadios.Count(); i++)
                {
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="form-check">
                            @Html.HiddenFor(x => x.TreRadios[i].Name)
                            @Html.CheckBoxFor(x=>x.TreRadios[i].IsSelected, new {@class = "form-check-input"})
                            <label class="form-check-label" for="flexCheckDefault">
                                @Model.TreRadios[i].Name
                            </label>
                        </div>
                        @if (Model.TreRadios[i].IsOnline)
                        {
                            <span class="badge  px-2 badge-sm bg-success text-light rounded-pill m-0 ms-3">
                                <i class="fa-solid fa-check-circle me-1"></i> Online
                            </span>
                        }
                        else
                        {
                            <span class="badge  px-2 badge-sm bg-grey text-dark rounded-pill m-0 ms-3">
                                <i class="fa-solid fa-ban me-1"></i> Offline
                            </span>
                        }
                    </div>
                }
                @*<div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                    <label class="form-check-label" for="flexCheckDefault">
                        TRE Name
                    </label>
                    <span class="badge  px-2 badge-sm bg-success text-light rounded-pill m-0 ms-3">
                        <i class="fa-solid fa-check-circle me-1"></i> Online
                    </span>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault2" checked>
                    <label class="form-check-label" for="flexCheckDefault2">
                        TRE Name
                    </label>
                    <span class="badge  px-2 badge-sm bg-grey text-dark rounded-pill m-0 ms-3">
                        <i class="fa-solid fa-ban me-1"></i> Offline
                    </span>
                </div>*@
            </div>
            <div class="mb-4">

                @Html.LabelFor(x => x.OriginOption, new {@class="form-label fw-bold"} )
                <div class="form-check">
                    @Html.RadioButtonFor(x => x.OriginOption, CrateOrigin.FileUpload, new {@class="form-check-input"})
                    @Html.Label(Helpers.PrettyCrateOrigin(CrateOrigin.FileUpload), Helpers.PrettyCrateOrigin(CrateOrigin.FileUpload), new {@class="form-check-label"})
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(x => x.OriginOption, CrateOrigin.External, new {@class="form-check-input"})
                    @Html.Label(Helpers.PrettyCrateOrigin(CrateOrigin.External), Helpers.PrettyCrateOrigin(CrateOrigin.External), new {@class="form-check-label"})
                </div>





            </div>
            <div id="externalUrlField" class="form-group" style="display:none;">
                @Html.LabelFor(x => x.ExternalURL,new {@class="form-label fw-bold"})
                @Html.TextBoxFor(x => x.ExternalURL,new {@class="form-control"})

            </div>

            <div id="uploadedFileField" class="form-group">
                @Html.LabelFor(x => x.File, new {@class="form-label fw-bold"})
                @Html.TextBoxFor(m => m.File, new { type = "file", @class="form-control" })

            </div>
            <div id="TesRun" class="form-group">
                @Html.TextBoxFor(m => m.TesRun)
            </div>
        </div>

        <div class="modal-footer">
            <div class="hero-block-1">

                <button type="button" class="btn btn-sm btn-link me-2" onclick="location.href='@Url.Action("GetProject", "Project", new { id = Model.ProjectId })'">
                    Cancel
                </button>
                <button type="submit" class="btn btn-sm btn-primary">Submit</button>
            </div>
        </div>
    }
}




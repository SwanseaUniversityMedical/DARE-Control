version: '3.5'

services:
  postgres:
    image: postgres
    #container_name: postgres
    restart: always
    ports:
      - 32769:5432
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
      - POSTGRES_DB=DARE-Control
      - POSTGRES_DB=myCoolDataDB
    networks:
      - communicating

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
#        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
#        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        - rabbitmq:/var/lib/rabbitmq/
  adminer:
    image: adminer
    restart: always
    ports:
      - 8087:8080
    networks:
      - communicating
  minio:
    image: quay.io/minio/minio
    restart: always
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_IDENTITY_OPENID_CONFIG_URL=https://auth2.ukserp.ac.uk/realms/Dare-Control/.well-known/openid-configuration
      - MINIO_IDENTITY_OPENID_CLIENT_ID=Dare-Control-Minio
      - MINIO_IDENTITY_OPENID_CLIENT_SECRET=MfjRrZJn6vL48MgCyoRn6H8Rr7sv02i0
      - MINIO_IDENTITY_OPENID_DISPLAY_NAME=SSO_IDENTIFIER
      - MINIO_IDENTITY_OPENID_SCOPES=openid
      - MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC=on
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
  minio2:
    image: quay.io/minio/minio
    container_name: minio2
    restart: always
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_IDENTITY_OPENID_CONFIG_URL=https://auth2.ukserp.ac.uk/realms/Dare-TRE/.well-known/openid-configuration
      - MINIO_IDENTITY_OPENID_CLIENT_ID=Dare-TRE-Minio
      - MINIO_IDENTITY_OPENID_CLIENT_SECRET=dZx08fCXVjonxBqg54CFvFv9MteoaqAT
      - MINIO_IDENTITY_OPENID_DISPLAY_NAME=SSO_IDENTIFIER
      - MINIO_IDENTITY_OPENID_SCOPES=openid
      - MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC=on
    volumes:
      - minio2_data:/data
    ports:
      - 9002:9000
      - 9003:9001
  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: always
    ports:
      - 5341:80
    volumes:
      - seq_data:/data
    environment:
      - ACCEPT_EULA=Y

  #postgresHasura:
  #  image: postgres:15
  #  restart: always
  #  ports:
  #    - 32770:5432
  #  volumes:
  #    - postgresHasura:/var/lib/postgresql/data
  #  environment:
  #    POSTGRES_PASSWORD: postgrespassword

  graphql-engine:
    image: hasura/graphql-engine
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:password123@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:password123@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      POSTGRSS_LOGIN: 'postgres://postgres:password123@postgres:5432/myCoolDataDB'
      HASURA_GRAPHQL_AUTH_HOOK: 'http://host.docker.internal:5269/api/HasuraAuthentication'
      HASURA_GRAPHQL_ADMIN_SECRET: 'ohCOOl'
    networks:
      - communicating
    depends_on:
      data-connector-agent:
        condition: service_healthy
  data-connector-agent:
    image: hasura/graphql-data-connector
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - communicating
    
#  control:
#    image: harbor.ukserp.ac.uk/dare/control:1.0.0
#    restart: always
#    ports:
#      - 8088:80
#    environment:
#      CONNECTIONSTRINGS__DEFAULTCONNECTION: "Server=postgres;Port=32769;Database=DARE-Control;UserId=postgres;Password=password123;"
######################################################
# VOLUME
######################################################
volumes:
    postgres:
      driver: local
    #postgresHasura:
    #  driver: local
    minio_data:
      driver: local
    minio2_data:
      driver: local
    seq_data:
      driver: local
    rabbitmq:
      driver: local

######################################################
# networks
######################################################      
networks:
  communicating:
    driver: bridge